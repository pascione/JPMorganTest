package receiver;

import java.math.BigDecimal;
import java.util.HashMap;
import java.util.Map;

import message.Message;
import message.Sale;
import product.Product;

public class MessageProcessor {

	private Map<String, Sale> salesProcessing;

	public MessageProcessor() {
		salesProcessing = new HashMap<String, Sale>();
	}

	public void processMessage(Message message) {
		if (!checkMessage(message))
			return;
		String key = message.getProduct().getType().toUpperCase();
		Sale existingSales = salesProcessing.get(key);
		if (existingSales != null) {
			existingSales.setQuantity(existingSales.getQuantity() + message.getQuantity());
			BigDecimal updatedValue = message.getPrice().multiply(new BigDecimal(message.getQuantity()))
					.add(existingSales.getTotalValue());
			existingSales.setTotalValue(updatedValue);

		} else {
			existingSales = new Sale();
			existingSales.setProduct(message.getProduct());
			existingSales.setQuantity(message.getQuantity());
			existingSales.setTotalValue(message.getPrice().multiply(new BigDecimal(message.getQuantity())));
		}
		this.salesProcessing.put(key, existingSales);

	}

	public Map<String, Sale> getSalesProcessing() {
		return salesProcessing;
	}

	private boolean checkMessage(Message message) {

		if ((message.getProduct() != null) && (message.getPrice() != null)) {
			return true;
		} else {
			System.out.println("Invalid Message");
			return false;
		}

	}

}
